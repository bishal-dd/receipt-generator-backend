package receipt

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/bishal-dd/receipt-generator-backend/graph/model"
	"github.com/bishal-dd/receipt-generator-backend/helper/contextUtil"
	"github.com/bishal-dd/receipt-generator-backend/helper/paginationUtil"
	"github.com/bishal-dd/receipt-generator-backend/helper/redisUtil"
)


func (r *ReceiptResolver) Receipts(ctx context.Context, first *int, after *string) (*model.ReceiptConnection, error) {
    userId, err := contextUtil.UserIdFromContext(ctx)
    if err != nil {
        return nil, err
    }
    
    offset, limit, err := paginationUtil.CalculatePagination(first, after)
	if err != nil {
		return nil, err 
	} 

    totalReceipts, err := r.CountTotalReceipts()
    if err != nil {
        return nil, err
    }

    receipts, err := r.GetCachedReceiptPages(ctx, userId, offset, limit)
    if err != nil {
        return nil, err
    }

    if receipts == nil {
        receipts, err = r.FetchReceiptsFromDB(ctx, offset, limit, userId)
        if err != nil {
            return nil, err
        }

        if err = redisUtil.CachePages(r.redis, ReceiptsPageGroupKey, ctx, ReceiptsKey,receipts, offset, limit,userId ); err != nil {
            return nil, err
        }
    }
    

    connection := paginationUtil.CreateConnection(receipts, totalReceipts, offset)

    return &model.ReceiptConnection{
        Edges: convertEdges(connection.Edges),
        PageInfo: (*model.PageInfo)(connection.PageInfo),
        TotalCount: connection.TotalCount,
    }, nil
}


func (r *ReceiptResolver) Receipt(ctx context.Context, id string) (*model.Receipt, error) {
	 receipt, err := r.GetCachedReceipt(ctx, id)
	 if receipt == nil {
		newReceipt, err := r.GetReceiptFromDB(id)
        if err != nil {
			return nil, err
		}
        
		if err = redisUtil.CacheResult(r.redis, ctx, fmt.Sprintf("%s:%s",ReceiptKey,id ), newReceipt, 10); err != nil {
			return nil, err
		}
        return newReceipt, nil
    } else if err != nil {
        return nil, err
    }
	
	 return receipt, nil
}
