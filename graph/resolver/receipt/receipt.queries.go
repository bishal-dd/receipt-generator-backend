package receipt

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/bishal-dd/receipt-generator-backend/graph/model"
	"github.com/bishal-dd/receipt-generator-backend/helper"
	"github.com/redis/go-redis/v9"
)


func (r *ReceiptResolver) Receipts(ctx context.Context) ([]*model.Receipt, error) {
    // Check if the receipts are cached in Redis
    receiptsJSON, err := r.redis.Get(ctx, Key).Result()
	var receipts []*model.Receipt

    if err == redis.Nil {
        if err := r.db.Find(&receipts).Error; err != nil {
            return nil, err
        }
		if err = helper.CacheResult(r.redis, ctx, Key, receipts, 10); err != nil {
			return nil, err
		}
        return receipts, nil
    } else if err != nil {
        return nil, err
    }
   // Unmarshal the JSON string into a slice of *model.Receipt
   if err := helper.Unmarshal([]byte(receiptsJSON), &receipts); err != nil {
	   return nil, err
   }

    return receipts, nil
}


func (r *ReceiptResolver) Receipt(ctx context.Context, id string) (*model.Receipt, error) {
	db := r.db
	var receipt model.Receipt
	if err := db.Where("id = ?", id).First(&receipt).Error; err != nil {
		return nil, err
	}
	return &receipt, nil
}
